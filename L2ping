#!/usr/bin/env python3
import argparse
import socket
import struct
import threading
import time

from ethernet import *
from pyngCommon import *
import pyngCommon       # for start_time setting

def main(target_mac, interface):
  done = threading.Event()  # wait for receive ready. Initial value is false  updated 20220124
  broadcast = False
  target_mac_bytes = eui48_to_bytes(target_mac)
  if target_mac_bytes == b'\xff\xff\xff\xff\xff\xff':
    broadcast = True  # if this is true, client_socket cannot be used!,
    # new socket thread(in pyngCommon.py) should be created for all frames
    thread = threading.Thread(target=frame_receive_from_all,
                              args=(interface, done), # array to tuple bug fix 20220123 and done added.
                              daemon=True)
    thread.start()
    # print('Receiving started!')
    if done.wait():  # none:no reset to fales, if needed, for example 0.1 sec  20220124 update
      time.sleep(0.03) # wait for thread receiving status ready, 30msec is added
  # Create a layer 2 raw socket
  client_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(ETH_P_ALL))
  # Bind an interface
  client_socket.bind((interface, 0))
  # send a frame
  client_socket.sendall(
    # Pack in network byte order
    struct.pack('!6s6sH32s', # 16: Layer2 ping arrived! is shown in server side
                target_mac_bytes,                 # destination MAC address
                get_hardware_address(interface),  # Source MAC address
                ETH_P_802_EX1,                     # Ethernet type
                'Layer2_mac_address_echo_request!'.encode()    # payload, this is received by server
    )
  )
  pyngCommon.start_time = time.time()
  print('Sent and wait for response: ')  # Time follows in this line
  if broadcast == False:
    frame_receive(target_mac, interface, client_socket) # only watching above client_socket
    client_socket.close()
  else:
    time.sleep(3)
    # wait for the frame_receive_from_all(interface) thread

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='pyng client')
  parser.add_argument('target', type=str, help='target MAC address')
  parser.add_argument('interface', type=str, help='source interface name')
  args = parser.parse_args()
  main(args.target, args.interface)
  
